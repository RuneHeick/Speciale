proxTV v1.0
===========

Matlab toolbox for fast Total Variation proximity operators.

For an up-to-date version, check http://arantxa.ii.uam.es/~gaa/software.html .

Index
-----

1. Installation.
2. Usage.
3. Examples.
4. Demos.
5. Copyright.
6. Contact.

1. Installation
---------------

To install proxTV follow the steps:

1) Open Matlab.
2) Change directory to the folder where this README file is located.
3) Type: "install();"
4) The message "proxTV successfully installed" will appear. If instead an error message shows up, check your mex compiler configuration (type "mex -setup"). If the error was produced by the "openmp" library, you might need to install it, or you can install proxTV with no multi-thread features by typing "installNoPar();". 
5) Add the /src subfolder to your Matlab path. You can do this e.g. by using the "pathtool()" utility.

Note: this toolbox has only been tested under Linux. Installation might require LAPACK (http://www.netlib.org/lapack/) and BLAS (http://www.netlib.org/blas/) libraries.

2. Usage
--------

Two main functions conform the proxTV toolbox: prox_TVLp and prox_TVgen. The first of them should suffice for most of the uses.

a) prox_TVLp
············

Solves Total Variation proximity operators for 1-dimensional or 2-dimensional signals, either applying a TV-L1 or a TV-L2 norm. The inputs and outputs of this function are:

    [x,info] = prox_TVLp(y,lambda,p,threads)

 Inputs:
   - y: input of the proximity operator.
   - lambda: premultiplier of the norm.
   - p: norm.
   - [threads]: number of threads (default 1). Used only for 2-D signals.

 Outputs:
   - x: solution of the proximity problem.
   - info: statistical info of the run algorithm:
       info.iters: number of iterations run (major iterations for the 2D case)
       info.stop: value of the stopping criterion.
       
For 1-dimensional signals the problem solved is

    min_x  1/2 ||x-y||_2^2 + lambda * TV(x,p)
    
  = min_x  1/2 ||x-y||_2^2 + lambda * ||sum_i (x_i - x_(i-1))||_p
    
Using p=1 results in the standard Total Variation regularizer, which generates a "blocky" reconstruction of the signal. Using p=2 instead produces a smoother reconstruction.

For 2-dimensional signals (e.g. images) the problem solved is

    min_X  1/2 ||X(:)-Y(:)||_2^2 + lambda * ( sum_i TV(Xri,p) + sum_j TV(Xcj,p) )
    
where X(:) is the vectorization (either along the rows or the columns) of X, Xri is the i-th row of X and Xcj is the j-th column of X. Using p=1 results in an anisotropic denoising filter. Value p=2 is also possible.

b) prox_TVgen
·············

Solves a generalized TV proximity operator for a multidimensional signal, in the form

    min_x 0.5 ||x-y||^2 + sum_i P(x,lambda_i,d_i,p_i)
    
where P(x,lambda_i,d_i,p_i) = lambda_i * sum_j TV(x(d_i)_j,p_i) with x(d)_j every possible 1-dimensional slice of x following the dimension d_i. The inputs and outputs of this function are:


 Inputs:
   - y: input signal.
   - lambdas: vector of lambda penalties of each penalty term.
   - ds: vector of dimensions of application of each penalty term.
   - norms: vector of norms of each penalty term (1 or 2 are accepted).
   - [threads]: number of threads to use (default: 1)

 Outputs:
   - x: solution of the proximity problem.
   - info: statistical info of the run algorithm:
       info.iters: number of major iterations run.
       info.stop: value of the stopping criterion.
       
When possible, prox_TVLp should be preferred. See the Examples section next for some concrete examples on using this function.

3. Examples
-----------

- Filter 1D signal using TV-L1 norm:
    prox_TVLp(x,lambda,1)
    
- Filter 2D signal using TV-L2 norm:
    prox_TVLp(x,lambda,2)

- Filter 2D signal using TV-L1 norm:
    prox_TVLp(X,lambda,1)
        or
    prox_TVgen(X,[lambda lambda],[1 2],[1 1])

- Filter 2D signal using TV-L2 norm:
    prox_TVLp(X,lambda,2)
        or
    prox_TVgen(X,[lambda lambda],[1 2],[2 2])
    
- Filter 2D signal using 4 parallel threads (last argument):
    prox_TVLp(X,lambda,1,4)
        or
    prox_TVgen(X,[lambda lambda],[1 2],[1 1],4)

- Filter 2D signal using TV-L1 norm for the rows, TV-L2 for the columns, and different penalties:
    prox_TVgen(X,[lambdaRows lambdaCols],[1 2],[1 2])

- Filter 1D signal using both TV-L1 and TV-L2 norms:
    prox_TVgen(X,[lambda1 lambda2],[1 1],[1 2])

- Filter 3D signal using TV-L1 norm:
    prox_TVgen(X,[lambda lambda lambda],[1 2 3],[1 1 1])

- Filter 3D signal using TV-L2 norm, not penalizing over the second dimension:
    prox_TVgen(X,[lambda lambda],[1 3],[2 2])

- Filter 2D signal using both TV-L1 and TV-L2 norms:
    prox_TVgen(X,[lambda1 lambda1 lambda2 lambda2],[1 2 1 2],[1 1 2 2])
    
4. Demos
--------

Some demos in the form of Matlab scripts showing how to work with proxTV are included in the subfolder /demos. They are:

- filter_signal: TV-L1 and TV-L2 filtering of 1-dimensional signals.
- filter_image: TV-L1 filtering of 2-dimensional image.
- filter_image_color: TV-L1 filtering of 3-dimensional image (length, width and color).
- filter_image_threads: multi-thread TV-L1 filtering of 2-dimensional image.

5. Copyright
------------

This program was developed for the paper

Fast Newton-type Methods for Total-Variation with Applications. Álvaro Barbero, Suvrit Sra. ICML 2011.

All rights reserved.

6. Contact
----------

For any questions and comments, please email alvaro.barbero@uam.es
